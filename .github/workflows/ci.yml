name: ci

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  GITHUB_ACTOR: pop-cli

concurrency:
  # Cancel any in-progress jobs for the same pull request
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt
          override: true

      - name: Check formatting
        run: cargo +nightly fmt --all -- --check

  build:
    needs: lint
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-Dwarnings"
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Check no default features
        run: cargo check --no-default-features

      - name: Check contracts feature
        run: cargo check --no-default-features --features contract

      - name: Check parachain feature
        run: cargo check --no-default-features --features parachain

      - name: Build default features
        run: cargo build

  clippy:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      checks: write
    env:
      RUSTFLAGS: "-Wmissing_docs"
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Annotate with Clippy warnings
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  deny:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crate:
          - pop-cli
          - pop-contracts
          - pop-parachains
          - pop-common
          - pop-telemetry
    steps:
      - uses: actions/checkout@v4

      - name: Run cargo-deny for ${{ matrix.crate }}
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check
          manifest-path: crates/${{ matrix.crate }}/Cargo.toml
          arguments: '--no-default-features'

  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/build-push-action@v5

  docs:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      checks: write
    env:
      RUSTDOCFLAGS: "-Dwarnings"
      RUSTFLAGS: "-Dmissing_docs"
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Check no default features
        run: cargo doc --no-deps

  unit-tests:
    needs: lint
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-Dwarnings"
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Run unit tests (no default features)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo test --lib --bins --no-default-features

      - name: Run unit tests (all features)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo test --lib --bins --all-features

      - name: Run unit tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cargo test --lib --bins --no-default-features --features contract
          cargo test --lib --bins --no-default-features --features parachain

  polkavm-unit-tests:
    needs: lint
    strategy:
      matrix:
        crate: [pop-cli, pop-contracts]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Run unit tests with polkavm-contracts for ${{ matrix.crate }}
        run: |
          if [[ "${{ matrix.crate }}" == "pop-cli" ]]; then
            cargo test --bins --locked --no-default-features --features "polkavm-contracts" -p ${{ matrix.crate }}
          else
            cargo test -p ${{ matrix.crate }} --no-default-features --features v6 --lib --bins
          fi

  coverage:
    needs: lint
    strategy:
      matrix:
        crate: [pop-cli, pop-contracts, pop-parachains, pop-common, pop-telemetry]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage for ${{ matrix.crate }}
        run: |
          if [[ "${{ matrix.crate }}" == "pop-cli" ]]; then
            cargo llvm-cov --bins \
              -p ${{ matrix.crate }} \
              --features "parachain telemetry wasm-contracts" \
              --codecov --output-path codecov-${{ matrix.crate }}.json
          elif [[ "${{ matrix.crate }}" == "pop-contracts" ]]; then
            cargo llvm-cov --lib --bins \
              -p ${{ matrix.crate }} \
              --features "v5" \
              --codecov --output-path codecov-${{ matrix.crate }}.json
          else
            cargo llvm-cov --lib --bins \
              -p ${{ matrix.crate }} \
              --codecov --output-path codecov-${{ matrix.crate }}.json
          fi

      - name: Upload report to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: codecov-${{ matrix.crate }}.json
          fail_ci_if_error: true

  documentation-tests:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Run doc tests
        run: cargo test --doc

  contract-integration-tests:
    needs: lint
    strategy:
      matrix:
        os: [ "ubuntu-latest", "macos-latest" ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          target: wasm32-unknown-unknown
          components: rust-src, clippy

      - name: Install dependencies
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y protobuf-compiler
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install protobuf
          fi
          protoc --version

      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: Run integration tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo test --no-default-features --features contract --test contract

  parachain-integration-tests:
    needs: lint
    strategy:
      matrix:
        os: [ "ubuntu-latest", "macos-latest" ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          target: wasm32-unknown-unknown
          components: rust-src, clippy

      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: Install packages (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Install packages (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf
          protoc --version

      - name: Run integration tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo test --no-default-features --features parachain --test parachain
